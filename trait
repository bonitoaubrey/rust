A trait in Rust is way to define a set of methods that a type can implement, allowing you to write reusable and flexible code that can work with multiple types.

When you define a trait, Rust creates a virtual table (vtable) that contains pointers to the implementaions of the trait's methods for each type that implements it.
Rust uses the vtable to dispatch the correct method implementation for a given type.

allow you to write code that can work with multiple types, making it easier to write reusable and flexible code.
provide a way to abstract away the implementation details of a type, allowing you to focus of the interface and behavior of the type.
help ensure type safety by allowing the compiler to check that a type implements the required methods, preventing type-related errors at runtime.
